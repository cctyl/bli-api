// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bilibili/tv/interfaces/dm/v1/dm.proto

package bilibili.tv.interfaces.dm.v1;

/**
 * <pre>
 * 弹幕默认配置
 * </pre>
 *
 * Protobuf type {@code bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig}
 */
public final class DanmuDefaultPlayerConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig)
    DanmuDefaultPlayerConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DanmuDefaultPlayerConfig.newBuilder() to construct.
  private DanmuDefaultPlayerConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DanmuDefaultPlayerConfig() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DanmuDefaultPlayerConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return bilibili.tv.interfaces.dm.v1.Dm.internal_static_bilibili_tv_interfaces_dm_v1_DanmuDefaultPlayerConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return bilibili.tv.interfaces.dm.v1.Dm.internal_static_bilibili_tv_interfaces_dm_v1_DanmuDefaultPlayerConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.class, bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.Builder.class);
  }

  public static final int PLAYER_DANMAKU_USE_DEFAULT_CONFIG_FIELD_NUMBER = 1;
  private boolean playerDanmakuUseDefaultConfig_ = false;
  /**
   * <pre>
   * 是否使用推荐弹幕设置
   * </pre>
   *
   * <code>bool player_danmaku_use_default_config = 1;</code>
   * @return The playerDanmakuUseDefaultConfig.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuUseDefaultConfig() {
    return playerDanmakuUseDefaultConfig_;
  }

  public static final int PLAYER_DANMAKU_AI_RECOMMENDED_SWITCH_FIELD_NUMBER = 4;
  private boolean playerDanmakuAiRecommendedSwitch_ = false;
  /**
   * <pre>
   * 是否开启智能云屏蔽
   * </pre>
   *
   * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
   * @return The playerDanmakuAiRecommendedSwitch.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuAiRecommendedSwitch() {
    return playerDanmakuAiRecommendedSwitch_;
  }

  public static final int PLAYER_DANMAKU_AI_RECOMMENDED_LEVEL_FIELD_NUMBER = 5;
  private int playerDanmakuAiRecommendedLevel_ = 0;
  /**
   * <pre>
   * 智能云屏蔽等级
   * </pre>
   *
   * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
   * @return The playerDanmakuAiRecommendedLevel.
   */
  @java.lang.Override
  public int getPlayerDanmakuAiRecommendedLevel() {
    return playerDanmakuAiRecommendedLevel_;
  }

  public static final int PLAYER_DANMAKU_BLOCKTOP_FIELD_NUMBER = 6;
  private boolean playerDanmakuBlocktop_ = false;
  /**
   * <pre>
   * 是否屏蔽顶端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blocktop = 6;</code>
   * @return The playerDanmakuBlocktop.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlocktop() {
    return playerDanmakuBlocktop_;
  }

  public static final int PLAYER_DANMAKU_BLOCKSCROLL_FIELD_NUMBER = 7;
  private boolean playerDanmakuBlockscroll_ = false;
  /**
   * <pre>
   * 是否屏蔽滚动弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockscroll = 7;</code>
   * @return The playerDanmakuBlockscroll.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockscroll() {
    return playerDanmakuBlockscroll_;
  }

  public static final int PLAYER_DANMAKU_BLOCKBOTTOM_FIELD_NUMBER = 8;
  private boolean playerDanmakuBlockbottom_ = false;
  /**
   * <pre>
   * 是否屏蔽底端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockbottom = 8;</code>
   * @return The playerDanmakuBlockbottom.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockbottom() {
    return playerDanmakuBlockbottom_;
  }

  public static final int PLAYER_DANMAKU_BLOCKCOLORFUL_FIELD_NUMBER = 9;
  private boolean playerDanmakuBlockcolorful_ = false;
  /**
   * <pre>
   * 是否屏蔽彩色弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockcolorful = 9;</code>
   * @return The playerDanmakuBlockcolorful.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockcolorful() {
    return playerDanmakuBlockcolorful_;
  }

  public static final int PLAYER_DANMAKU_BLOCKREPEAT_FIELD_NUMBER = 10;
  private boolean playerDanmakuBlockrepeat_ = false;
  /**
   * <pre>
   * 是否屏蔽重复弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockrepeat = 10;</code>
   * @return The playerDanmakuBlockrepeat.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockrepeat() {
    return playerDanmakuBlockrepeat_;
  }

  public static final int PLAYER_DANMAKU_BLOCKSPECIAL_FIELD_NUMBER = 11;
  private boolean playerDanmakuBlockspecial_ = false;
  /**
   * <pre>
   * 是否屏蔽高级弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockspecial = 11;</code>
   * @return The playerDanmakuBlockspecial.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockspecial() {
    return playerDanmakuBlockspecial_;
  }

  public static final int PLAYER_DANMAKU_OPACITY_FIELD_NUMBER = 12;
  private float playerDanmakuOpacity_ = 0F;
  /**
   * <pre>
   * 弹幕不透明度
   * </pre>
   *
   * <code>float player_danmaku_opacity = 12;</code>
   * @return The playerDanmakuOpacity.
   */
  @java.lang.Override
  public float getPlayerDanmakuOpacity() {
    return playerDanmakuOpacity_;
  }

  public static final int PLAYER_DANMAKU_SCALINGFACTOR_FIELD_NUMBER = 13;
  private float playerDanmakuScalingfactor_ = 0F;
  /**
   * <pre>
   * 弹幕缩放比例
   * </pre>
   *
   * <code>float player_danmaku_scalingfactor = 13;</code>
   * @return The playerDanmakuScalingfactor.
   */
  @java.lang.Override
  public float getPlayerDanmakuScalingfactor() {
    return playerDanmakuScalingfactor_;
  }

  public static final int PLAYER_DANMAKU_DOMAIN_FIELD_NUMBER = 14;
  private float playerDanmakuDomain_ = 0F;
  /**
   * <pre>
   * 弹幕显示区域
   * </pre>
   *
   * <code>float player_danmaku_domain = 14;</code>
   * @return The playerDanmakuDomain.
   */
  @java.lang.Override
  public float getPlayerDanmakuDomain() {
    return playerDanmakuDomain_;
  }

  public static final int PLAYER_DANMAKU_SPEED_FIELD_NUMBER = 15;
  private int playerDanmakuSpeed_ = 0;
  /**
   * <pre>
   * 弹幕速度
   * </pre>
   *
   * <code>int32 player_danmaku_speed = 15;</code>
   * @return The playerDanmakuSpeed.
   */
  @java.lang.Override
  public int getPlayerDanmakuSpeed() {
    return playerDanmakuSpeed_;
  }

  public static final int INLINE_PLAYER_DANMAKU_SWITCH_FIELD_NUMBER = 16;
  private boolean inlinePlayerDanmakuSwitch_ = false;
  /**
   * <pre>
   * 是否开启弹幕
   * </pre>
   *
   * <code>bool inline_player_danmaku_switch = 16;</code>
   * @return The inlinePlayerDanmakuSwitch.
   */
  @java.lang.Override
  public boolean getInlinePlayerDanmakuSwitch() {
    return inlinePlayerDanmakuSwitch_;
  }

  public static final int PLAYER_DANMAKU_SENIOR_MODE_SWITCH_FIELD_NUMBER = 17;
  private int playerDanmakuSeniorModeSwitch_ = 0;
  /**
   * <pre>
   * </pre>
   *
   * <code>int32 player_danmaku_senior_mode_switch = 17;</code>
   * @return The playerDanmakuSeniorModeSwitch.
   */
  @java.lang.Override
  public int getPlayerDanmakuSeniorModeSwitch() {
    return playerDanmakuSeniorModeSwitch_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (playerDanmakuUseDefaultConfig_ != false) {
      output.writeBool(1, playerDanmakuUseDefaultConfig_);
    }
    if (playerDanmakuAiRecommendedSwitch_ != false) {
      output.writeBool(4, playerDanmakuAiRecommendedSwitch_);
    }
    if (playerDanmakuAiRecommendedLevel_ != 0) {
      output.writeInt32(5, playerDanmakuAiRecommendedLevel_);
    }
    if (playerDanmakuBlocktop_ != false) {
      output.writeBool(6, playerDanmakuBlocktop_);
    }
    if (playerDanmakuBlockscroll_ != false) {
      output.writeBool(7, playerDanmakuBlockscroll_);
    }
    if (playerDanmakuBlockbottom_ != false) {
      output.writeBool(8, playerDanmakuBlockbottom_);
    }
    if (playerDanmakuBlockcolorful_ != false) {
      output.writeBool(9, playerDanmakuBlockcolorful_);
    }
    if (playerDanmakuBlockrepeat_ != false) {
      output.writeBool(10, playerDanmakuBlockrepeat_);
    }
    if (playerDanmakuBlockspecial_ != false) {
      output.writeBool(11, playerDanmakuBlockspecial_);
    }
    if (java.lang.Float.floatToRawIntBits(playerDanmakuOpacity_) != 0) {
      output.writeFloat(12, playerDanmakuOpacity_);
    }
    if (java.lang.Float.floatToRawIntBits(playerDanmakuScalingfactor_) != 0) {
      output.writeFloat(13, playerDanmakuScalingfactor_);
    }
    if (java.lang.Float.floatToRawIntBits(playerDanmakuDomain_) != 0) {
      output.writeFloat(14, playerDanmakuDomain_);
    }
    if (playerDanmakuSpeed_ != 0) {
      output.writeInt32(15, playerDanmakuSpeed_);
    }
    if (inlinePlayerDanmakuSwitch_ != false) {
      output.writeBool(16, inlinePlayerDanmakuSwitch_);
    }
    if (playerDanmakuSeniorModeSwitch_ != 0) {
      output.writeInt32(17, playerDanmakuSeniorModeSwitch_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (playerDanmakuUseDefaultConfig_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, playerDanmakuUseDefaultConfig_);
    }
    if (playerDanmakuAiRecommendedSwitch_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, playerDanmakuAiRecommendedSwitch_);
    }
    if (playerDanmakuAiRecommendedLevel_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, playerDanmakuAiRecommendedLevel_);
    }
    if (playerDanmakuBlocktop_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, playerDanmakuBlocktop_);
    }
    if (playerDanmakuBlockscroll_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, playerDanmakuBlockscroll_);
    }
    if (playerDanmakuBlockbottom_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, playerDanmakuBlockbottom_);
    }
    if (playerDanmakuBlockcolorful_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, playerDanmakuBlockcolorful_);
    }
    if (playerDanmakuBlockrepeat_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, playerDanmakuBlockrepeat_);
    }
    if (playerDanmakuBlockspecial_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(11, playerDanmakuBlockspecial_);
    }
    if (java.lang.Float.floatToRawIntBits(playerDanmakuOpacity_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(12, playerDanmakuOpacity_);
    }
    if (java.lang.Float.floatToRawIntBits(playerDanmakuScalingfactor_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(13, playerDanmakuScalingfactor_);
    }
    if (java.lang.Float.floatToRawIntBits(playerDanmakuDomain_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(14, playerDanmakuDomain_);
    }
    if (playerDanmakuSpeed_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(15, playerDanmakuSpeed_);
    }
    if (inlinePlayerDanmakuSwitch_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(16, inlinePlayerDanmakuSwitch_);
    }
    if (playerDanmakuSeniorModeSwitch_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(17, playerDanmakuSeniorModeSwitch_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig)) {
      return super.equals(obj);
    }
    bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig other = (bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig) obj;

    if (getPlayerDanmakuUseDefaultConfig()
        != other.getPlayerDanmakuUseDefaultConfig()) return false;
    if (getPlayerDanmakuAiRecommendedSwitch()
        != other.getPlayerDanmakuAiRecommendedSwitch()) return false;
    if (getPlayerDanmakuAiRecommendedLevel()
        != other.getPlayerDanmakuAiRecommendedLevel()) return false;
    if (getPlayerDanmakuBlocktop()
        != other.getPlayerDanmakuBlocktop()) return false;
    if (getPlayerDanmakuBlockscroll()
        != other.getPlayerDanmakuBlockscroll()) return false;
    if (getPlayerDanmakuBlockbottom()
        != other.getPlayerDanmakuBlockbottom()) return false;
    if (getPlayerDanmakuBlockcolorful()
        != other.getPlayerDanmakuBlockcolorful()) return false;
    if (getPlayerDanmakuBlockrepeat()
        != other.getPlayerDanmakuBlockrepeat()) return false;
    if (getPlayerDanmakuBlockspecial()
        != other.getPlayerDanmakuBlockspecial()) return false;
    if (java.lang.Float.floatToIntBits(getPlayerDanmakuOpacity())
        != java.lang.Float.floatToIntBits(
            other.getPlayerDanmakuOpacity())) return false;
    if (java.lang.Float.floatToIntBits(getPlayerDanmakuScalingfactor())
        != java.lang.Float.floatToIntBits(
            other.getPlayerDanmakuScalingfactor())) return false;
    if (java.lang.Float.floatToIntBits(getPlayerDanmakuDomain())
        != java.lang.Float.floatToIntBits(
            other.getPlayerDanmakuDomain())) return false;
    if (getPlayerDanmakuSpeed()
        != other.getPlayerDanmakuSpeed()) return false;
    if (getInlinePlayerDanmakuSwitch()
        != other.getInlinePlayerDanmakuSwitch()) return false;
    if (getPlayerDanmakuSeniorModeSwitch()
        != other.getPlayerDanmakuSeniorModeSwitch()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PLAYER_DANMAKU_USE_DEFAULT_CONFIG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuUseDefaultConfig());
    hash = (37 * hash) + PLAYER_DANMAKU_AI_RECOMMENDED_SWITCH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuAiRecommendedSwitch());
    hash = (37 * hash) + PLAYER_DANMAKU_AI_RECOMMENDED_LEVEL_FIELD_NUMBER;
    hash = (53 * hash) + getPlayerDanmakuAiRecommendedLevel();
    hash = (37 * hash) + PLAYER_DANMAKU_BLOCKTOP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuBlocktop());
    hash = (37 * hash) + PLAYER_DANMAKU_BLOCKSCROLL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuBlockscroll());
    hash = (37 * hash) + PLAYER_DANMAKU_BLOCKBOTTOM_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuBlockbottom());
    hash = (37 * hash) + PLAYER_DANMAKU_BLOCKCOLORFUL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuBlockcolorful());
    hash = (37 * hash) + PLAYER_DANMAKU_BLOCKREPEAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuBlockrepeat());
    hash = (37 * hash) + PLAYER_DANMAKU_BLOCKSPECIAL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPlayerDanmakuBlockspecial());
    hash = (37 * hash) + PLAYER_DANMAKU_OPACITY_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getPlayerDanmakuOpacity());
    hash = (37 * hash) + PLAYER_DANMAKU_SCALINGFACTOR_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getPlayerDanmakuScalingfactor());
    hash = (37 * hash) + PLAYER_DANMAKU_DOMAIN_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getPlayerDanmakuDomain());
    hash = (37 * hash) + PLAYER_DANMAKU_SPEED_FIELD_NUMBER;
    hash = (53 * hash) + getPlayerDanmakuSpeed();
    hash = (37 * hash) + INLINE_PLAYER_DANMAKU_SWITCH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getInlinePlayerDanmakuSwitch());
    hash = (37 * hash) + PLAYER_DANMAKU_SENIOR_MODE_SWITCH_FIELD_NUMBER;
    hash = (53 * hash) + getPlayerDanmakuSeniorModeSwitch();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * 弹幕默认配置
   * </pre>
   *
   * Protobuf type {@code bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig)
      bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bilibili.tv.interfaces.dm.v1.Dm.internal_static_bilibili_tv_interfaces_dm_v1_DanmuDefaultPlayerConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bilibili.tv.interfaces.dm.v1.Dm.internal_static_bilibili_tv_interfaces_dm_v1_DanmuDefaultPlayerConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.class, bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.Builder.class);
    }

    // Construct using bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      playerDanmakuUseDefaultConfig_ = false;
      playerDanmakuAiRecommendedSwitch_ = false;
      playerDanmakuAiRecommendedLevel_ = 0;
      playerDanmakuBlocktop_ = false;
      playerDanmakuBlockscroll_ = false;
      playerDanmakuBlockbottom_ = false;
      playerDanmakuBlockcolorful_ = false;
      playerDanmakuBlockrepeat_ = false;
      playerDanmakuBlockspecial_ = false;
      playerDanmakuOpacity_ = 0F;
      playerDanmakuScalingfactor_ = 0F;
      playerDanmakuDomain_ = 0F;
      playerDanmakuSpeed_ = 0;
      inlinePlayerDanmakuSwitch_ = false;
      playerDanmakuSeniorModeSwitch_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return bilibili.tv.interfaces.dm.v1.Dm.internal_static_bilibili_tv_interfaces_dm_v1_DanmuDefaultPlayerConfig_descriptor;
    }

    @java.lang.Override
    public bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig getDefaultInstanceForType() {
      return bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.getDefaultInstance();
    }

    @java.lang.Override
    public bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig build() {
      bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig buildPartial() {
      bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig result = new bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.playerDanmakuUseDefaultConfig_ = playerDanmakuUseDefaultConfig_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.playerDanmakuAiRecommendedSwitch_ = playerDanmakuAiRecommendedSwitch_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.playerDanmakuAiRecommendedLevel_ = playerDanmakuAiRecommendedLevel_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.playerDanmakuBlocktop_ = playerDanmakuBlocktop_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.playerDanmakuBlockscroll_ = playerDanmakuBlockscroll_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.playerDanmakuBlockbottom_ = playerDanmakuBlockbottom_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.playerDanmakuBlockcolorful_ = playerDanmakuBlockcolorful_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.playerDanmakuBlockrepeat_ = playerDanmakuBlockrepeat_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.playerDanmakuBlockspecial_ = playerDanmakuBlockspecial_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.playerDanmakuOpacity_ = playerDanmakuOpacity_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.playerDanmakuScalingfactor_ = playerDanmakuScalingfactor_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.playerDanmakuDomain_ = playerDanmakuDomain_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.playerDanmakuSpeed_ = playerDanmakuSpeed_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.inlinePlayerDanmakuSwitch_ = inlinePlayerDanmakuSwitch_;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.playerDanmakuSeniorModeSwitch_ = playerDanmakuSeniorModeSwitch_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig) {
        return mergeFrom((bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig other) {
      if (other == bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig.getDefaultInstance()) return this;
      if (other.getPlayerDanmakuUseDefaultConfig() != false) {
        setPlayerDanmakuUseDefaultConfig(other.getPlayerDanmakuUseDefaultConfig());
      }
      if (other.getPlayerDanmakuAiRecommendedSwitch() != false) {
        setPlayerDanmakuAiRecommendedSwitch(other.getPlayerDanmakuAiRecommendedSwitch());
      }
      if (other.getPlayerDanmakuAiRecommendedLevel() != 0) {
        setPlayerDanmakuAiRecommendedLevel(other.getPlayerDanmakuAiRecommendedLevel());
      }
      if (other.getPlayerDanmakuBlocktop() != false) {
        setPlayerDanmakuBlocktop(other.getPlayerDanmakuBlocktop());
      }
      if (other.getPlayerDanmakuBlockscroll() != false) {
        setPlayerDanmakuBlockscroll(other.getPlayerDanmakuBlockscroll());
      }
      if (other.getPlayerDanmakuBlockbottom() != false) {
        setPlayerDanmakuBlockbottom(other.getPlayerDanmakuBlockbottom());
      }
      if (other.getPlayerDanmakuBlockcolorful() != false) {
        setPlayerDanmakuBlockcolorful(other.getPlayerDanmakuBlockcolorful());
      }
      if (other.getPlayerDanmakuBlockrepeat() != false) {
        setPlayerDanmakuBlockrepeat(other.getPlayerDanmakuBlockrepeat());
      }
      if (other.getPlayerDanmakuBlockspecial() != false) {
        setPlayerDanmakuBlockspecial(other.getPlayerDanmakuBlockspecial());
      }
      if (other.getPlayerDanmakuOpacity() != 0F) {
        setPlayerDanmakuOpacity(other.getPlayerDanmakuOpacity());
      }
      if (other.getPlayerDanmakuScalingfactor() != 0F) {
        setPlayerDanmakuScalingfactor(other.getPlayerDanmakuScalingfactor());
      }
      if (other.getPlayerDanmakuDomain() != 0F) {
        setPlayerDanmakuDomain(other.getPlayerDanmakuDomain());
      }
      if (other.getPlayerDanmakuSpeed() != 0) {
        setPlayerDanmakuSpeed(other.getPlayerDanmakuSpeed());
      }
      if (other.getInlinePlayerDanmakuSwitch() != false) {
        setInlinePlayerDanmakuSwitch(other.getInlinePlayerDanmakuSwitch());
      }
      if (other.getPlayerDanmakuSeniorModeSwitch() != 0) {
        setPlayerDanmakuSeniorModeSwitch(other.getPlayerDanmakuSeniorModeSwitch());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              playerDanmakuUseDefaultConfig_ = input.readBool();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 32: {
              playerDanmakuAiRecommendedSwitch_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 32
            case 40: {
              playerDanmakuAiRecommendedLevel_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 40
            case 48: {
              playerDanmakuBlocktop_ = input.readBool();
              bitField0_ |= 0x00000008;
              break;
            } // case 48
            case 56: {
              playerDanmakuBlockscroll_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 56
            case 64: {
              playerDanmakuBlockbottom_ = input.readBool();
              bitField0_ |= 0x00000020;
              break;
            } // case 64
            case 72: {
              playerDanmakuBlockcolorful_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 72
            case 80: {
              playerDanmakuBlockrepeat_ = input.readBool();
              bitField0_ |= 0x00000080;
              break;
            } // case 80
            case 88: {
              playerDanmakuBlockspecial_ = input.readBool();
              bitField0_ |= 0x00000100;
              break;
            } // case 88
            case 101: {
              playerDanmakuOpacity_ = input.readFloat();
              bitField0_ |= 0x00000200;
              break;
            } // case 101
            case 109: {
              playerDanmakuScalingfactor_ = input.readFloat();
              bitField0_ |= 0x00000400;
              break;
            } // case 109
            case 117: {
              playerDanmakuDomain_ = input.readFloat();
              bitField0_ |= 0x00000800;
              break;
            } // case 117
            case 120: {
              playerDanmakuSpeed_ = input.readInt32();
              bitField0_ |= 0x00001000;
              break;
            } // case 120
            case 128: {
              inlinePlayerDanmakuSwitch_ = input.readBool();
              bitField0_ |= 0x00002000;
              break;
            } // case 128
            case 136: {
              playerDanmakuSeniorModeSwitch_ = input.readInt32();
              bitField0_ |= 0x00004000;
              break;
            } // case 136
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private boolean playerDanmakuUseDefaultConfig_ ;
    /**
     * <pre>
     * 是否使用推荐弹幕设置
     * </pre>
     *
     * <code>bool player_danmaku_use_default_config = 1;</code>
     * @return The playerDanmakuUseDefaultConfig.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuUseDefaultConfig() {
      return playerDanmakuUseDefaultConfig_;
    }
    /**
     * <pre>
     * 是否使用推荐弹幕设置
     * </pre>
     *
     * <code>bool player_danmaku_use_default_config = 1;</code>
     * @param value The playerDanmakuUseDefaultConfig to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuUseDefaultConfig(boolean value) {

      playerDanmakuUseDefaultConfig_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否使用推荐弹幕设置
     * </pre>
     *
     * <code>bool player_danmaku_use_default_config = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuUseDefaultConfig() {
      bitField0_ = (bitField0_ & ~0x00000001);
      playerDanmakuUseDefaultConfig_ = false;
      onChanged();
      return this;
    }

    private boolean playerDanmakuAiRecommendedSwitch_ ;
    /**
     * <pre>
     * 是否开启智能云屏蔽
     * </pre>
     *
     * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
     * @return The playerDanmakuAiRecommendedSwitch.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuAiRecommendedSwitch() {
      return playerDanmakuAiRecommendedSwitch_;
    }
    /**
     * <pre>
     * 是否开启智能云屏蔽
     * </pre>
     *
     * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
     * @param value The playerDanmakuAiRecommendedSwitch to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuAiRecommendedSwitch(boolean value) {

      playerDanmakuAiRecommendedSwitch_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否开启智能云屏蔽
     * </pre>
     *
     * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuAiRecommendedSwitch() {
      bitField0_ = (bitField0_ & ~0x00000002);
      playerDanmakuAiRecommendedSwitch_ = false;
      onChanged();
      return this;
    }

    private int playerDanmakuAiRecommendedLevel_ ;
    /**
     * <pre>
     * 智能云屏蔽等级
     * </pre>
     *
     * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
     * @return The playerDanmakuAiRecommendedLevel.
     */
    @java.lang.Override
    public int getPlayerDanmakuAiRecommendedLevel() {
      return playerDanmakuAiRecommendedLevel_;
    }
    /**
     * <pre>
     * 智能云屏蔽等级
     * </pre>
     *
     * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
     * @param value The playerDanmakuAiRecommendedLevel to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuAiRecommendedLevel(int value) {

      playerDanmakuAiRecommendedLevel_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 智能云屏蔽等级
     * </pre>
     *
     * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuAiRecommendedLevel() {
      bitField0_ = (bitField0_ & ~0x00000004);
      playerDanmakuAiRecommendedLevel_ = 0;
      onChanged();
      return this;
    }

    private boolean playerDanmakuBlocktop_ ;
    /**
     * <pre>
     * 是否屏蔽顶端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blocktop = 6;</code>
     * @return The playerDanmakuBlocktop.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlocktop() {
      return playerDanmakuBlocktop_;
    }
    /**
     * <pre>
     * 是否屏蔽顶端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blocktop = 6;</code>
     * @param value The playerDanmakuBlocktop to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlocktop(boolean value) {

      playerDanmakuBlocktop_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽顶端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blocktop = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlocktop() {
      bitField0_ = (bitField0_ & ~0x00000008);
      playerDanmakuBlocktop_ = false;
      onChanged();
      return this;
    }

    private boolean playerDanmakuBlockscroll_ ;
    /**
     * <pre>
     * 是否屏蔽滚动弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockscroll = 7;</code>
     * @return The playerDanmakuBlockscroll.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockscroll() {
      return playerDanmakuBlockscroll_;
    }
    /**
     * <pre>
     * 是否屏蔽滚动弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockscroll = 7;</code>
     * @param value The playerDanmakuBlockscroll to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockscroll(boolean value) {

      playerDanmakuBlockscroll_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽滚动弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockscroll = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockscroll() {
      bitField0_ = (bitField0_ & ~0x00000010);
      playerDanmakuBlockscroll_ = false;
      onChanged();
      return this;
    }

    private boolean playerDanmakuBlockbottom_ ;
    /**
     * <pre>
     * 是否屏蔽底端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockbottom = 8;</code>
     * @return The playerDanmakuBlockbottom.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockbottom() {
      return playerDanmakuBlockbottom_;
    }
    /**
     * <pre>
     * 是否屏蔽底端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockbottom = 8;</code>
     * @param value The playerDanmakuBlockbottom to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockbottom(boolean value) {

      playerDanmakuBlockbottom_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽底端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockbottom = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockbottom() {
      bitField0_ = (bitField0_ & ~0x00000020);
      playerDanmakuBlockbottom_ = false;
      onChanged();
      return this;
    }

    private boolean playerDanmakuBlockcolorful_ ;
    /**
     * <pre>
     * 是否屏蔽彩色弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockcolorful = 9;</code>
     * @return The playerDanmakuBlockcolorful.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockcolorful() {
      return playerDanmakuBlockcolorful_;
    }
    /**
     * <pre>
     * 是否屏蔽彩色弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockcolorful = 9;</code>
     * @param value The playerDanmakuBlockcolorful to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockcolorful(boolean value) {

      playerDanmakuBlockcolorful_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽彩色弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockcolorful = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockcolorful() {
      bitField0_ = (bitField0_ & ~0x00000040);
      playerDanmakuBlockcolorful_ = false;
      onChanged();
      return this;
    }

    private boolean playerDanmakuBlockrepeat_ ;
    /**
     * <pre>
     * 是否屏蔽重复弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockrepeat = 10;</code>
     * @return The playerDanmakuBlockrepeat.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockrepeat() {
      return playerDanmakuBlockrepeat_;
    }
    /**
     * <pre>
     * 是否屏蔽重复弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockrepeat = 10;</code>
     * @param value The playerDanmakuBlockrepeat to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockrepeat(boolean value) {

      playerDanmakuBlockrepeat_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽重复弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockrepeat = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockrepeat() {
      bitField0_ = (bitField0_ & ~0x00000080);
      playerDanmakuBlockrepeat_ = false;
      onChanged();
      return this;
    }

    private boolean playerDanmakuBlockspecial_ ;
    /**
     * <pre>
     * 是否屏蔽高级弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockspecial = 11;</code>
     * @return The playerDanmakuBlockspecial.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockspecial() {
      return playerDanmakuBlockspecial_;
    }
    /**
     * <pre>
     * 是否屏蔽高级弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockspecial = 11;</code>
     * @param value The playerDanmakuBlockspecial to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockspecial(boolean value) {

      playerDanmakuBlockspecial_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽高级弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockspecial = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockspecial() {
      bitField0_ = (bitField0_ & ~0x00000100);
      playerDanmakuBlockspecial_ = false;
      onChanged();
      return this;
    }

    private float playerDanmakuOpacity_ ;
    /**
     * <pre>
     * 弹幕不透明度
     * </pre>
     *
     * <code>float player_danmaku_opacity = 12;</code>
     * @return The playerDanmakuOpacity.
     */
    @java.lang.Override
    public float getPlayerDanmakuOpacity() {
      return playerDanmakuOpacity_;
    }
    /**
     * <pre>
     * 弹幕不透明度
     * </pre>
     *
     * <code>float player_danmaku_opacity = 12;</code>
     * @param value The playerDanmakuOpacity to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuOpacity(float value) {

      playerDanmakuOpacity_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 弹幕不透明度
     * </pre>
     *
     * <code>float player_danmaku_opacity = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuOpacity() {
      bitField0_ = (bitField0_ & ~0x00000200);
      playerDanmakuOpacity_ = 0F;
      onChanged();
      return this;
    }

    private float playerDanmakuScalingfactor_ ;
    /**
     * <pre>
     * 弹幕缩放比例
     * </pre>
     *
     * <code>float player_danmaku_scalingfactor = 13;</code>
     * @return The playerDanmakuScalingfactor.
     */
    @java.lang.Override
    public float getPlayerDanmakuScalingfactor() {
      return playerDanmakuScalingfactor_;
    }
    /**
     * <pre>
     * 弹幕缩放比例
     * </pre>
     *
     * <code>float player_danmaku_scalingfactor = 13;</code>
     * @param value The playerDanmakuScalingfactor to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuScalingfactor(float value) {

      playerDanmakuScalingfactor_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 弹幕缩放比例
     * </pre>
     *
     * <code>float player_danmaku_scalingfactor = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuScalingfactor() {
      bitField0_ = (bitField0_ & ~0x00000400);
      playerDanmakuScalingfactor_ = 0F;
      onChanged();
      return this;
    }

    private float playerDanmakuDomain_ ;
    /**
     * <pre>
     * 弹幕显示区域
     * </pre>
     *
     * <code>float player_danmaku_domain = 14;</code>
     * @return The playerDanmakuDomain.
     */
    @java.lang.Override
    public float getPlayerDanmakuDomain() {
      return playerDanmakuDomain_;
    }
    /**
     * <pre>
     * 弹幕显示区域
     * </pre>
     *
     * <code>float player_danmaku_domain = 14;</code>
     * @param value The playerDanmakuDomain to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuDomain(float value) {

      playerDanmakuDomain_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 弹幕显示区域
     * </pre>
     *
     * <code>float player_danmaku_domain = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuDomain() {
      bitField0_ = (bitField0_ & ~0x00000800);
      playerDanmakuDomain_ = 0F;
      onChanged();
      return this;
    }

    private int playerDanmakuSpeed_ ;
    /**
     * <pre>
     * 弹幕速度
     * </pre>
     *
     * <code>int32 player_danmaku_speed = 15;</code>
     * @return The playerDanmakuSpeed.
     */
    @java.lang.Override
    public int getPlayerDanmakuSpeed() {
      return playerDanmakuSpeed_;
    }
    /**
     * <pre>
     * 弹幕速度
     * </pre>
     *
     * <code>int32 player_danmaku_speed = 15;</code>
     * @param value The playerDanmakuSpeed to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuSpeed(int value) {

      playerDanmakuSpeed_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 弹幕速度
     * </pre>
     *
     * <code>int32 player_danmaku_speed = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuSpeed() {
      bitField0_ = (bitField0_ & ~0x00001000);
      playerDanmakuSpeed_ = 0;
      onChanged();
      return this;
    }

    private boolean inlinePlayerDanmakuSwitch_ ;
    /**
     * <pre>
     * 是否开启弹幕
     * </pre>
     *
     * <code>bool inline_player_danmaku_switch = 16;</code>
     * @return The inlinePlayerDanmakuSwitch.
     */
    @java.lang.Override
    public boolean getInlinePlayerDanmakuSwitch() {
      return inlinePlayerDanmakuSwitch_;
    }
    /**
     * <pre>
     * 是否开启弹幕
     * </pre>
     *
     * <code>bool inline_player_danmaku_switch = 16;</code>
     * @param value The inlinePlayerDanmakuSwitch to set.
     * @return This builder for chaining.
     */
    public Builder setInlinePlayerDanmakuSwitch(boolean value) {

      inlinePlayerDanmakuSwitch_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否开启弹幕
     * </pre>
     *
     * <code>bool inline_player_danmaku_switch = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearInlinePlayerDanmakuSwitch() {
      bitField0_ = (bitField0_ & ~0x00002000);
      inlinePlayerDanmakuSwitch_ = false;
      onChanged();
      return this;
    }

    private int playerDanmakuSeniorModeSwitch_ ;
    /**
     * <pre>
     * </pre>
     *
     * <code>int32 player_danmaku_senior_mode_switch = 17;</code>
     * @return The playerDanmakuSeniorModeSwitch.
     */
    @java.lang.Override
    public int getPlayerDanmakuSeniorModeSwitch() {
      return playerDanmakuSeniorModeSwitch_;
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>int32 player_danmaku_senior_mode_switch = 17;</code>
     * @param value The playerDanmakuSeniorModeSwitch to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuSeniorModeSwitch(int value) {

      playerDanmakuSeniorModeSwitch_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>int32 player_danmaku_senior_mode_switch = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuSeniorModeSwitch() {
      bitField0_ = (bitField0_ & ~0x00004000);
      playerDanmakuSeniorModeSwitch_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig)
  }

  // @@protoc_insertion_point(class_scope:bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig)
  private static final bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig();
  }

  public static bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DanmuDefaultPlayerConfig>
      PARSER = new com.google.protobuf.AbstractParser<DanmuDefaultPlayerConfig>() {
    @java.lang.Override
    public DanmuDefaultPlayerConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DanmuDefaultPlayerConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DanmuDefaultPlayerConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public bilibili.tv.interfaces.dm.v1.DanmuDefaultPlayerConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

