// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bilibili/broadcast/v1/broadcast.proto

package bilibili.broadcast.v1;

public interface FrameOptionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bilibili.broadcast.v1.FrameOption)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * 消息id
   * </pre>
   *
   * <code>int64 message_id = 1;</code>
   * @return The messageId.
   */
  long getMessageId();

  /**
   * <pre>
   * frame序号
   * </pre>
   *
   * <code>int64 sequence = 2;</code>
   * @return The sequence.
   */
  long getSequence();

  /**
   * <pre>
   * 是否进行消息回执(发出MessageAckReq)
   * downstream 上只有服务端设置为true，客户端响应
   * upstream   上只有客户端设置为true，服务端响应
   * 响应帧禁止设置is_ack，协议上禁止循环
   * 通常只有业务帧才可能设置is_ack, 因为协议栈(例如心跳、鉴权)另有响应约定
   * </pre>
   *
   * <code>bool is_ack = 3;</code>
   * @return The isAck.
   */
  boolean getIsAck();

  /**
   * <pre>
   * 业务状态码
   * </pre>
   *
   * <code>.bilibili.rpc.Status status = 4;</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <pre>
   * 业务状态码
   * </pre>
   *
   * <code>.bilibili.rpc.Status status = 4;</code>
   * @return The status.
   */
  bilibili.rpc.Status getStatus();
  /**
   * <pre>
   * 业务状态码
   * </pre>
   *
   * <code>.bilibili.rpc.Status status = 4;</code>
   */
  bilibili.rpc.StatusOrBuilder getStatusOrBuilder();

  /**
   * <pre>
   * 业务ack来源, 仅downstream时候由服务端填写.
   * </pre>
   *
   * <code>string ack_origin = 5;</code>
   * @return The ackOrigin.
   */
  java.lang.String getAckOrigin();
  /**
   * <pre>
   * 业务ack来源, 仅downstream时候由服务端填写.
   * </pre>
   *
   * <code>string ack_origin = 5;</code>
   * @return The bytes for ackOrigin.
   */
  com.google.protobuf.ByteString
      getAckOriginBytes();

  /**
   * <pre>
   * </pre>
   *
   * <code>int64 timestamp = 6;</code>
   * @return The timestamp.
   */
  long getTimestamp();
}
